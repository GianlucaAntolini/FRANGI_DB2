prefix sy: <http://www.dei.unipd.it/Database2/FRANGI/spotifyYoutubeStatistics/>

1 - Top 10 song by number of streams

select distinct (group_concat(distinct ?aName ; separator=", ") as ?aNames) ?sName ?streams where {
    ?artist sy:published ?song ;
            sy:personName ?aName .
    ?song sy:trackName ?sName ;
          sy:stream ?streams .
}
group by ?sName ?streams
order by desc (?streams)
limit 10

2 - Song with max duration for each playlist

select distinct ?pName ?sName ?duration where {
    ?song sy:isPartOf ?playlist ;
          sy:trackName ?sName ;
          sy:duration ?duration .
    ?playlist sy:playlistName ?pName .
    {
        select distinct ?pName1 (MAX(?duration1) as ?mDuration) where{
    		?song1 sy:isPartOf ?playlist1 ;
    		   	   sy:duration ?duration1 .
    		?playlist1 sy:playlistName ?pName1 .
		}
        group by ?pName1
    }
    filter (?pName = ?pName1 && ?duration = ?mDuration)
}
order by desc (?duration)

3 - Artist that wrote more songs

select ?aName (count(?song) as ?nSongs) where{
    ?artist sy:personName ?aName ;
            sy:published ?song .
}
group by ?aName
order by desc(?nSongs)
limit 1

or

select (count(?artist) as ?nArtists) ?songs where{
    {
		select ?artist (count(?song) as ?songs) where{
			?artist sy:published ?song .
		}
		group by ?artist
		order by desc(?songs)
    }
}
group by ?songs

4 - Artist that produced the most streams

select ?aName (sum(?stream) as ?streams) where{
	?artist sy:personName ?aName ;
         sy:published ?song .
    ?song sy:stream ?stream.
}
group by ?aName
order by desc(?streams)
limit 1

5 - First 10 channels by number of views, with also likes and comments

select distinct (sum(?views) as ?totalViews) (sum(?likes) as ?totalLikes) (sum(?comments) as ?totalComments) ?name where{
    ?video rdf:type sy:YoutubeVideo;
            sy:views ?views;
            sy:likes ?likes;
            sy:comments ?comments;
            sy:videoTitle ?title;
            sy:isUploadedBy ?channel.
    ?channel sy:channelName ?name.
}
group by ?name
order by desc(?totalViews)
limit 10

6 - The playlist with most song is the one with most streams?

ask where{
    {
        select ?playlist1 (count(?song) as ?songs) where{
        	?playlist1 rdf:type sy:SpotifyPlaylist;
                  ^sy:isPartOf ?song.
    	}
        group by ?playlist1
        order by desc(?songs)
        limit 1
    }.
    
    {
        select ?playlist2 (sum(?streams) as ?totalStreams) where{
            ?playlist2 rdf:type sy:SpotifyPlaylist;
                      ^sy:isPartOf ?song.
            ?song sy:stream ?streams;
        }    
        group by ?playlist2
        order by desc(?totalStreams)
        limit 1
    }.
    
    filter(?playlist1 = ?playlist2)
}

7 - Correspondence between artist and genre (by number of songs in a playlist of such genre)

select ?artistName (group_concat(?genre1; separator=" ,") as ?genres) ?n where {
	{
        select ?artistName1 ?genre1 (COUNT(?song1) as ?numSongs1) where {
            ?song1 :isPartOf ?playlist1;
                  :trackName ?songName1;
                  :isPublishedBy ?artist1.
            ?artist1 :personName ?artistName1.
            ?playlist1 rdf:type :SpotifyPlaylist;
                      :hasGenre ?genre1.
        }
        group by ?artistName1 ?genre1
        order by ?artistName1 desc(?numSongs1)
    }.
    {
        select ?artistName (max(?numSongs) as ?n) where {
          {
            select ?artistName ?genre (COUNT(?song) as ?numSongs) where {
              ?song :isPartOf ?playlist;
                    :trackName ?songName;
                    :isPublishedBy ?artist.
              ?artist :personName ?artistName.
              ?playlist rdf:type :SpotifyPlaylist;
                        :hasGenre ?genre.
            }
            group by ?artistName ?genre
            order by ?artistName desc(?numSongs)
          }
        }
        group by ?artistName

    }.
    filter(?artistName = ?artistName1 && ?numSongs1 = ?n)
}
group by ?artistName ?n

8.1 - Most common five genres among playlists

select ?genre (count(?playlist) as ?numPlaylists) where {
    ?playlist rdf:type :SpotifyPlaylist;
              :hasGenre ?genre.
}
group by ?genre
order by desc(?numPlaylists)
limit 5

8.2 - Genre of top 5 playlists with most played songs

select ?pName (group_concat(distinct ?gName ; separator = ", ") as ?genres) ?streams where{
	{ 
        select ?pName ?gName (sum(?stream) as ?streams) where{
    		?playlist sy:playlistName ?pName ;
                      sy:hasGenre ?genre .
    		?song sy:isPartOf ?playlist ;
        	  	  sy:stream ?stream .
            ?genre sy:genreName ?gName .
		}
        group by ?pName ?gName
        order by desc(?streams)
    }
}
group by ?pName ?streams
limit 5

or 

select distinct ?pName ?gName ?streams where{
    ?playlist1 sy:playlistName ?pName1 ;
              sy:hasGenre ?genre1 .
    ?genre1 skos:narrower ?subgenre ;
          	sy:genreName ?gName1 .
	{ 
        select ?pName ?gName (sum(?stream) as ?streams) where{
    		?playlist sy:playlistName ?pName ;
                      sy:hasGenre ?genre .
    		?song sy:isPartOf ?playlist ;
        	  	  sy:stream ?stream .
            ?genre sy:genreName ?gName .
		}
        group by ?pName ?gName
        order by desc(?streams)
    }
    filter (?pName1 = ?pName && ?gName1 = ?gName)
}
limit 5




GIANLUCA:

1: Random pair of songs that have similar tempo and key (useful for djs)

SELECT ?inputSong ?inputTrackName ?inputKey ?inputTempo ?similarSong ?similarTrackName ?similarKey ?similarTempo
WHERE {
  {
    # Get a random song 
    SELECT ?inputSong ?inputTrackName ?inputKey ?inputTempo
    WHERE {
      ?inputSong a sy:SpotifySong ;
                 sy:trackName ?inputTrackName ;
                 sy:key ?inputKey ;
                 sy:tempo ?inputTempo .
    BIND(RAND() AS ?randOrder1)
	}
    ORDER BY ?randOrder1
    LIMIT 1
  }

  # Get all the other songs but ordered randomly
  {
    SELECT ?similarSong ?similarTrackName ?similarKey ?similarTempo
    WHERE {
      ?similarSong a sy:SpotifySong ;
                   sy:trackName ?similarTrackName ;
                   sy:key ?similarKey ;
                   sy:tempo ?similarTempo .

    BIND(RAND() AS ?randOrder2)
	}
    ORDER BY ?randOrder2
        
    
  }
    #Filters to get matches
    FILTER (?inputSong != ?similarSong)  # Ensure it's a different song (can happen that they are the same but very rare (different id but name is the same just written differently))
    # Threshold for key and tempo can be changed
  FILTER (ABS(?inputKey - ?similarKey) < 2)  
  FILTER (ABS(?inputTempo - ?similarTempo) < 5.0)
}
#Just keep one result (the first)
LIMIT 1

2: Average number of views of songs for the 3 types of Album types

SELECT ?albumType (AVG(?streams) AS ?averageStreams) WHERE {
  ?artist sy:published ?song ;
          sy:personName ?aName .
  ?song sy:trackName ?sName ;
        sy:stream ?streams .
  OPTIONAL {
    ?song sy:belongsTo ?album .
    ?album sy:albumType ?albumType .
  }
}
GROUP BY ?albumType
ORDER BY DESC(?averageStreams)


3: In average, are n of streams of a song higher than the n of views of their related yt video?

ASK
WHERE {
  {
    SELECT (COUNT(?youtubeVideo) AS ?numVideosMoreViews)
    WHERE {
      ?youtubeVideo sy:isVideoOf ?spotifySong .
      ?youtubeVideo sy:views ?views .
      ?spotifySong sy:stream ?streams .
      FILTER (?views > ?streams)
    }
  }
  {
    SELECT (COUNT(?youtubeVideo) AS ?numVideosLessViews)
    WHERE {
      ?youtubeVideo sy:isVideoOf ?spotifySong .
      ?youtubeVideo sy:views ?views .
      ?spotifySong sy:stream ?streams .
      FILTER (?views < ?streams)
    }
  }
  FILTER (?numVideosLessViews > ?numVideosMoreViews)
}




